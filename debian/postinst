#!/bin/bash
set -e

# Export PATH with all possible uv locations
export PATH="/root/.local/bin:/root/.cargo/bin:$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:/usr/bin:/bin:$PATH"

# Source platform detection helper script
PLATFORM_DETECT_SCRIPT="/opt/distiller-sdk/platform-detect.sh"
[ -f "$PLATFORM_DETECT_SCRIPT" ] || {
	echo "ERROR: Platform detection script not found: $PLATFORM_DETECT_SCRIPT" >&2
	exit 1
}
source "$PLATFORM_DETECT_SCRIPT"

# Main installation logic
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ]; then
	# Remove old distiller-cm5-sdk installation completely
	[ -d "/opt/distiller-cm5-sdk" ] && rm -rf /opt/distiller-cm5-sdk

	echo "INFO: Setting up Distiller SDK..."

	# Detect platform for hardware configuration
	PLATFORM=$(detect_platform)
	if [ "$PLATFORM" = "unknown" ]; then
		echo "ERROR: Could not detect platform" >&2
		exit 1
	fi

	echo "INFO: Detected platform: $(get_platform_description "$PLATFORM")" >&2

	# Get platform-specific configuration using helper functions
	CONFIG_FILE=$(get_config_file "$PLATFORM")
	PLATFORM_DESC=$(get_platform_description "$PLATFORM")
	SPI_DEVICE=$(get_spi_device "$PLATFORM")
	GPIO_CHIP=$(get_gpio_chip "$PLATFORM")

	cp "$CONFIG_FILE" /opt/distiller-sdk/eink.conf

	cd /opt/distiller-sdk

	[ -d ".venv" ] && rm -rf ".venv"
	if ! uv venv --system-site-packages 2>/dev/null; then
		echo "INFO: Creating venv without system-site-packages..."
		uv venv || {
			echo "WARNING: Failed to create virtual environment with uv"
			exit 1
		}
	fi

	# Install dependencies
	uv sync

	VENV_PATH="/opt/distiller-sdk/.venv"

	# Set appropriate permissions
	chmod -R a+r /opt/distiller-sdk
	find /opt/distiller-sdk -type d -exec chmod 755 {} \; \
		-o -type f -name "*.py" -exec chmod 644 {} \;
	find /opt/distiller-sdk/.venv/bin -type f -exec chmod 755 {} \;

	# Verify installation
	VENV_PYTHON="$VENV_PATH/bin/python"
	if [ ! -f "$VENV_PYTHON" ]; then
		echo "ERROR: Virtual environment setup failed"
		exit 1
	fi

	echo "INFO: Verifying Python installation..."
	if ! $VENV_PYTHON -c "import sys; print(f'INFO: Python {sys.version}')" 2>/dev/null; then
		echo "ERROR: Python environment verification failed"
		exit 1
	fi

	echo "INFO: Testing SDK imports..."
	if ! $VENV_PYTHON -c "import distiller_sdk; print('INFO: SDK imported successfully')" 2>/dev/null; then
		echo "ERROR: distiller_sdk import failed"
		exit 1
	fi

	# Create activation script
	cat >/opt/distiller-sdk/activate.sh <<'EOF'
#!/bin/bash
# Activate the distiller-sdk virtual environment
source /opt/distiller-sdk/.venv/bin/activate
export PYTHONPATH="/opt/distiller-sdk/src:$PYTHONPATH"
export LD_LIBRARY_PATH="/opt/distiller-sdk/lib:$LD_LIBRARY_PATH"
echo "Distiller SDK environment activated"
EOF
	chmod 755 /opt/distiller-sdk/activate.sh

	# Platform-specific device checks
	if [ "$PLATFORM" = "radxa" ]; then
		[ -e "$SPI_DEVICE" ] || {
			echo "WARNING: /dev/spidev3.0 not found!"
			echo "Enable overlay: spi3-m1-cs0-spidev"
		}
		[ -e "$GPIO_CHIP" ] || echo "WARNING: $GPIO_CHIP not found!"
	else
		[ -e "$SPI_DEVICE" ] || {
			echo "WARNING: $SPI_DEVICE not found!"
			echo "Please enable SPI in raspi-config or /boot/config.txt"
		}
		[ -e "$GPIO_CHIP" ] || echo "WARNING: $GPIO_CHIP not found!"
	fi

	echo ""
	echo "============================================="
	echo "Distiller SDK installed successfully!"
	echo "============================================="
	echo ""
	echo "Platform: $PLATFORM_DESC"
	echo "Config: /opt/distiller-sdk/eink.conf"
	echo ""
	echo "To activate the environment, run:"
	echo "  source /opt/distiller-sdk/activate.sh"
	echo ""
fi
