#!/bin/sh
set -e

# Function to detect the actual user running the installation
detect_install_user() {
    local INSTALL_USER=""

    # Try SUDO_USER first (most reliable when using sudo)
    if [ -n "$SUDO_USER" ] && [ "$SUDO_USER" != "root" ]; then
        INSTALL_USER="$SUDO_USER"
    # Try logname (works in most cases)
    elif command -v logname >/dev/null 2>&1; then
        INSTALL_USER=$(logname 2>/dev/null) || true
    # Try who am i (fallback)
    elif [ -n "$(who am i | awk '{print $1}')" ]; then
        INSTALL_USER=$(who am i | awk '{print $1}')
    # If all else fails, use current USER
    elif [ -n "$USER" ] && [ "$USER" != "root" ]; then
        INSTALL_USER="$USER"
    fi

    # Default to root if we can't detect
    if [ -z "$INSTALL_USER" ] || [ "$INSTALL_USER" = "root" ]; then
        # If we're root, check if this is intentional
        echo "Warning: Installing as root user. SDK will be owned by root."
        INSTALL_USER="root"
    fi

    echo "$INSTALL_USER"
}

# Setup the Python environment using uv
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ]; then
	echo "Setting up Distiller CM5 SDK for Radxa Zero 3..."

	# Detect the actual user
	INSTALL_USER=$(detect_install_user)
	INSTALL_GROUP=$(id -gn $INSTALL_USER 2>/dev/null || echo $INSTALL_USER)

	echo "Installing SDK for user: $INSTALL_USER (group: $INSTALL_GROUP)"

	# Find uv binary - check multiple locations including install user's home
	UV_BINARY=""
	USER_HOME=$(getent passwd "$INSTALL_USER" | cut -d: -f6)

	echo "Looking for uv package manager..."

	# First check system-wide locations
	if [ -f "/usr/local/bin/uv" ] && [ -x "/usr/local/bin/uv" ]; then
		UV_BINARY="/usr/local/bin/uv"
		echo "Found uv at: $UV_BINARY"
	# Check the actual install user's home directory
	elif [ -n "$USER_HOME" ] && [ -f "$USER_HOME/.local/bin/uv" ] && [ -x "$USER_HOME/.local/bin/uv" ]; then
		UV_BINARY="$USER_HOME/.local/bin/uv"
		echo "Found uv at: $UV_BINARY"
	# Try to find uv in the actual user's PATH
	elif [ -n "$INSTALL_USER" ] && su - "$INSTALL_USER" -c "command -v uv" >/dev/null 2>&1; then
		UV_BINARY=$(su - "$INSTALL_USER" -c "command -v uv")
		echo "Found uv in user PATH at: $UV_BINARY"
	# Check if available in current PATH
	elif command -v uv >/dev/null 2>&1; then
		UV_BINARY="uv"
		echo "Found uv in system PATH"
	# Check root's home as fallback
	elif [ -f "/root/.local/bin/uv" ] && [ -x "/root/.local/bin/uv" ]; then
		UV_BINARY="/root/.local/bin/uv"
		echo "Found uv at: $UV_BINARY"
	else
		echo "Error: uv package manager not found despite preinst check"
		echo "Checked locations:"
		echo "  - /usr/local/bin/uv"
		echo "  - $USER_HOME/.local/bin/uv"
		echo "  - User's PATH via su"
		echo "  - System PATH"
		echo ""
		echo "Please ensure uv is installed. You can install it with:"
		echo "  curl -LsSf https://astral.sh/uv/install.sh | sh"
		exit 1
	fi

	# Add install user to necessary groups for hardware access
	echo "Adding $INSTALL_USER to hardware access groups..."
	for group in audio video spi dialout gpio i2c; do
		if getent group $group >/dev/null 2>&1; then
			usermod -a -G $group $INSTALL_USER 2>/dev/null || true
		fi
	done

	# Set up proper ownership first
	echo "Setting up directory ownership..."
	chown -R $INSTALL_USER:$INSTALL_GROUP /opt/distiller-cm5-sdk

	# Install platform-specific eink configuration
	echo "Installing Radxa Zero 3 eink configuration..."
	cp /opt/distiller-cm5-sdk/configs/radxa-zero3.conf /opt/distiller-cm5-sdk/eink.conf
	chown $INSTALL_USER:$INSTALL_GROUP /opt/distiller-cm5-sdk/eink.conf

	# Create virtual environment using uv as install user
	cd /opt/distiller-cm5-sdk
	echo "Creating Python virtual environment using uv..."

	# Clean up any existing virtual environment and lock file
	rm -rf .venv 2>/dev/null || true
	rm -f uv.lock 2>/dev/null || true

	# Create fresh virtual environment as install user
	echo "Creating fresh Python virtual environment..."
	if ! su -s /bin/bash -c "cd /opt/distiller-cm5-sdk && \"$UV_BINARY\" venv .venv" $INSTALL_USER; then
		echo "Error: Failed to create virtual environment"
		exit 1
	fi

	# Install dependencies using uv sync as install user
	echo "Installing Python dependencies using uv sync..."
	echo "Generating architecture-specific lockfile and installing dependencies..."
	if ! su -s /bin/bash -c "cd /opt/distiller-cm5-sdk && \"$UV_BINARY\" sync" $INSTALL_USER; then
		echo "Error: Failed to install Python dependencies with uv sync"
		echo "This could be due to:"
		echo "  - Network connectivity issues (check internet connection)"
		echo "  - PyPI repository unavailable"
		echo "  - Incompatible Python packages for ARM64 architecture"
		echo "  - Insufficient disk space"
		echo ""
		echo "All required system dependencies should have been installed automatically."
		echo "If you continue to have issues, check the error messages above for details."
		exit 1
	fi

	# Verify virtual environment was created successfully
	VENV_PYTHON="/opt/distiller-cm5-sdk/.venv/bin/python"
	if [ ! -f "$VENV_PYTHON" ]; then
		echo "Error: Virtual environment setup failed"
		exit 1
	fi

	# Test basic imports to verify installation (as install user)
	echo "Verifying Python package installation..."
	if ! su -s /bin/bash -c "cd /opt/distiller-cm5-sdk && \"$VENV_PYTHON\" -c \"import sys; print('Python version:', sys.version)\"" $INSTALL_USER; then
		echo "Error: Python environment verification failed"
		exit 1
	fi

	# Test SDK imports (as install user)
	echo "Testing distiller-cm5-sdk imports..."
	if ! su -s /bin/bash -c "cd /opt/distiller-cm5-sdk && \"$VENV_PYTHON\" -c \"import distiller_cm5_sdk; print('SDK imported successfully')\"" $INSTALL_USER; then
		echo "Error: distiller-cm5-sdk import failed"
		exit 1
	fi

	echo "Installation verification completed successfully"

	# Create convenience script for activating the environment
	cat >/opt/distiller-cm5-sdk/activate.sh <<'EOF'
#!/bin/bash
# Activate the distiller-cm5-sdk virtual environment
source /opt/distiller-cm5-sdk/.venv/bin/activate
export PYTHONPATH="/opt/distiller-cm5-sdk/src:$PYTHONPATH"
export LD_LIBRARY_PATH="/opt/distiller-cm5-sdk/lib:$LD_LIBRARY_PATH"
echo "Distiller CM5 SDK environment activated"
echo "Python packages available: distiller_cm5_sdk"
echo "Parakeet models: /opt/distiller-cm5-sdk/src/distiller_cm5_sdk/parakeet/models/"
echo "Piper models: /opt/distiller-cm5-sdk/src/distiller_cm5_sdk/piper/models/"
echo "Shared library: /opt/distiller-cm5-sdk/lib/libdistiller_display_sdk_shared.so"
echo ""
echo "Package management with uv:"
echo "  Add package: cd /opt/distiller-cm5-sdk && uv add <package>"
echo "  Remove package: cd /opt/distiller-cm5-sdk && uv remove <package>"
echo "  Update dependencies: cd /opt/distiller-cm5-sdk && uv sync"
echo ""
echo "Installation was successful! uv.lock generated for $(uname -m) architecture"
EOF

	chmod +x /opt/distiller-cm5-sdk/activate.sh

	# Create a README file
	cat >/opt/distiller-cm5-sdk/README <<'EOF'
Distiller CM5 SDK - Debian Package Installation (Radxa Zero 3)
===============================================================

This package installs the Distiller CM5 SDK to /opt/distiller-cm5-sdk,
pre-configured for Radxa Zero 3/3W hardware.

The SDK uses uv for Python package management.

Hardware Configuration:
- Platform: Radxa Zero 3/3W (RK3566)
- SPI Device: /dev/spidev3.0
- GPIO Chip: /dev/gpiochip3
- GPIO Pins: DC=8 (GPIO3_B0), RST=2 (GPIO3_A2), BUSY=1 (GPIO3_A1)

Usage:
1. Activate the environment: source /opt/distiller-cm5-sdk/activate.sh
2. Use the SDK in your projects by setting PYTHONPATH and LD_LIBRARY_PATH

For dependent projects (like distiller-cm5-mcp-hub and distiller-cm5-services):
- Set PYTHONPATH to include /opt/distiller-cm5-sdk/src
- Set LD_LIBRARY_PATH to include /opt/distiller-cm5-sdk/lib
- Use the virtual environment at /opt/distiller-cm5-sdk/.venv

Note: The uv.lock file is generated during installation for the target architecture to ensure compatibility.

Package management:
- To add packages: cd /opt/distiller-cm5-sdk && uv add <package>
- To remove packages: cd /opt/distiller-cm5-sdk && uv remove <package>
- To sync packages: cd /opt/distiller-cm5-sdk && uv sync

For more information, see: /usr/share/doc/distiller-cm5-sdk/README.Debian
EOF

	# Ensure proper permissions with install user ownership (redundant but ensures consistency)
	chown -R $INSTALL_USER:$INSTALL_GROUP /opt/distiller-cm5-sdk
	chmod -R 755 /opt/distiller-cm5-sdk
	chmod 644 /opt/distiller-cm5-sdk/README

	# Ensure venv scripts are executable
	chmod +x /opt/distiller-cm5-sdk/.venv/bin/*

	# Make sure install user can write to the directory for package management
	chmod 775 /opt/distiller-cm5-sdk
	chmod 775 /opt/distiller-cm5-sdk/.venv

	# Check if SPI3 device exists
	if [ ! -e "/dev/spidev3.0" ]; then
		echo ""
		echo "⚠ WARNING: /dev/spidev3.0 not found!"
		echo "  To enable SPI3-M1, run:"
		echo "    sudo armbian-config"
		echo "    Navigate to: System → Hardware → spi3-m1-cs0-spidev"
		echo "    Enable and reboot"
		echo ""
	else
		echo "✓ SPI3 device found: /dev/spidev3.0"
	fi

	if [ ! -e "/dev/gpiochip3" ]; then
		echo "⚠ WARNING: /dev/gpiochip3 not found!"
	else
		echo "✓ GPIO chip 3 found: /dev/gpiochip3"
	fi

	# Update shared library cache
	ldconfig

	echo ""
	echo "============================================="
	echo "Distiller CM5 SDK installed successfully!"
	echo "============================================="
	echo ""
	echo "Platform: Radxa Zero 3/3W"
	echo "Config: /opt/distiller-cm5-sdk/eink.conf"
	echo ""
	echo "To activate the environment, run:"
	echo "  source /opt/distiller-cm5-sdk/activate.sh"
	echo ""
fi

#DEBHELPER#