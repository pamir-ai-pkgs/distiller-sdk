# Makefile for building Rust library
# Detects current architecture and builds accordingly
# Prefers ARM64 when available

# Detect current architecture
HOST_ARCH := $(shell uname -m)
ifeq ($(HOST_ARCH),aarch64)
    RUST_TARGET = aarch64-unknown-linux-gnu
else ifeq ($(HOST_ARCH),arm64)
    RUST_TARGET = aarch64-unknown-linux-gnu
else
    # For x86_64 or other architectures, build for current host
    RUST_TARGET = aarch64-unknown-linux-gnu
endif

CARGO = cargo

# Find all Rust source files
RUST_SOURCES := $(shell find src -name "*.rs" 2>/dev/null)
CARGO_FILES := Cargo.toml

.PHONY: all clean build install-target target-info check-rebuild

all: build

build: libdistiller_display_sdk_shared.so

# Main library target with proper dependencies
libdistiller_display_sdk_shared.so: $(RUST_SOURCES) $(CARGO_FILES)
	@echo "Building Rust library (dependencies changed)..."
ifeq ($(RUST_TARGET),)
	$(CARGO) build --release
	cp target/release/libdistiller_display_sdk_shared.so $@
else
	$(CARGO) build --release --target $(RUST_TARGET)
	cp target/$(RUST_TARGET)/release/libdistiller_display_sdk_shared.so $@
endif
	@echo "Library built successfully: $@"

# Check if rebuild is needed (useful for debugging)
check-rebuild: 
	@if [ ! -f libdistiller_display_sdk_shared.so ]; then \
		echo "Library does not exist, rebuild needed"; \
	elif [ -n "$$(find src -name '*.rs' -newer libdistiller_display_sdk_shared.so 2>/dev/null)" ]; then \
		echo "Source files changed, rebuild needed"; \
	elif [ Cargo.toml -nt libdistiller_display_sdk_shared.so ]; then \
		echo "Cargo files changed, rebuild needed"; \
	else \
		echo "Library is up-to-date"; \
	fi

clean:
	$(CARGO) clean
	rm -f libdistiller_display_sdk_shared.so target-build

# Install Rust target if not available
install-target:
ifeq ($(RUST_TARGET),aarch64-unknown-linux-gnu)
	rustup target add $(RUST_TARGET)
endif

# Show target info
target-info:
	@echo "Host architecture: $(HOST_ARCH)"
	@echo "Rust target: $(RUST_TARGET)"
ifeq ($(RUST_TARGET),aarch64-unknown-linux-gnu)
	@rustup target list --installed | grep $(RUST_TARGET) || echo "Target $(RUST_TARGET) not installed"
endif
